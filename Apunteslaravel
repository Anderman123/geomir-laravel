
########## CREAR SEEDER ##################
php artisan make:seeder UserSeeder

########## Ejecuta (TODOS) los SEEDER ##################
php artisan db:seed


#### GITHUB ####
git add .
git commit -m "Codi base del projecte"
git push origin b0.1
#### Forzar ####f
git push --set-upstream origin b0.1 
git tag laravel -m "Projecte Laravel"     (IR VARIANDO laravel)
#### SUBIR UNA VERSION A LA BRANCA PRINCIPAL MERGE ####
git push origin b0.1-pep
git checkout b0.1
git pull origin b0.1
git merge b0.1-pep
git push origin b0.1

#### SUBIR UNA VERSION a otra rama de b0.2-alexander a b0.2 ####




#### LARAVEL EN MARCHA ####
php artisan serve
npm run dev


################################# POR DONDE VOY #################################
Buscar CTRL+F
Cada membre ha de crear la Policy corresponent (Post o Place), assegu



########## LISTA DE RUTAS #######################
php artisan route:list

########## CRUD PROPIO #######################
php artisan make:migration create_places_table
php artisan make:model Place
php artisan make:controller PlaceController --model=Place --resource



##### EXAMEN #####
php artisan make:migration create_users_table
php artisan make:model User
php artisan make:controller UserController --model=User --resource

###############  EXAMEN DE CERO ####################
##### REFRESCAR CAHCE ##### 
php artisan config:clear
##### REFRESCAR MIGRACIONES DROP: ##### 
php artisan migrate:fresh


composer install
##### CREACION PROYECTO ##### 
composer create-project laravel/laravel Prueba-Examen

##### REFRESCAR CAHCE ##### 
php artisan config:clear
##### instalar dependencia ##### 
npm install
###### DESPLEGAR PROYECTO ######
npm run dev  
php artisan serve  
###### INSTALAR DEBUG ######
composer require barryvdh/laravel-debugbar --dev
###### GERMINADOR ###### /database/seeders
php artisan make:seeder UserSeeder
###### EJECUTAR SEEDER ######
php artisan db:seed

// IMPORTACIONES para soportar DB en ROLES -> DB
use Illuminate\Support\Facades\DB;
  $this->call([
      UserSeeder::class,
  ]);


###### AUTENTIFICACION BREEZE ######
composer install (POR SI ACASO)
composer require laravel/breeze --dev
php artisan breeze:install blade --dark
npm install
npm run dev

RegisteredUserController.php :
  AÑADIR ESTA LINEA ->DE CODIGO

$user->sendEmailVerificationNotification();

###### Crear migracion ######
php artisan make:migration create_NOMBRE_table

###### ID PROPIO ######
$table->id();
###### COGER EL ID DE OTRA TABLA ######
$table->unsignedBigInteger('user_id');
$table->foreign('user_id')->references('id')->on('users');
###### PARA TEXTO varchar(255)######
$table->string('nombre',255);
###### Boleano ######
$table->boolean('hola')->default(false);
###### UNICO + 255 caracters ######
$table->string('hola',255)->unique();
###### float:Numerico | opcional:nullable######
$table->float('hola')->nullable();

###### CREAR MODELO ######
php artisan make:model HOLA

###### CREAR CONTROLADOR con CRUD asociado a un modelo ######
php artisan make:controller JobController --model=Jobs --resource

##################################################################
###### PARA VER INFORMACION DE OTRA TABLA A PARTIR DE ID (ID) ######
class Jobs extends Model
{
    use HasFactory;
    protected $fillable = [
        'title',
        'requirements',
        'salary',
        'company_id', #### QUIERO VER EL NOMBRE DE LA COMPAÑIA
    ];
    public function companies() ##### HAY QUE IMPORTAR EL MODELO
    {
        return $this->belongsTo(Companies::class);
    }
}
###### JobController.php ######
###### IMPORTAR LOS DOS MODELOS ######
use App\Models\Jobs;
use App\Models\Companies;

###### importarlo con otro nombre ######
    public function index()
    {
        return view("jobs.index", [
            "jobs" => Jobs::all(),
            "companies" => Companies::all()
            
        ]);
    }





